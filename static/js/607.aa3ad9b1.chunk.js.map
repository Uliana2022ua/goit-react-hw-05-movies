{"version":3,"file":"static/js/607.aa3ad9b1.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","utils/defaultImage.js","utils/movieAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Content = styled.p`\n  text-align: justify;\n`;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Box } from 'components/Box';\nimport { getReviews } from 'utils';\nimport Loader from 'components/Loader';\nimport { Content } from './Reviews.styled';\n\nconst STATUS = {\n  idle: 0,\n  pending: 1,\n  resolved: 2,\n  rejected: 3,\n};\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n  const [status, setStatus] = useState(STATUS.idle);\n\n  // -------------------------------------------------\n  useEffect(() => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    async function getMovieCast() {\n      try {\n        setStatus(STATUS.pending);\n        const reviewInfo = await getReviews({ id: movieId, signal });\n        setReviews(reviewInfo);\n        setStatus(STATUS.resolved);\n      } catch (error) {\n        setStatus(STATUS.rejected);\n        toast(error.message);\n      }\n    }\n    getMovieCast();\n\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  // -------------------------------------------------\n  if (!reviews) {\n    return;\n  }\n\n  // -------------------------------------------------\n  return (\n    <Box borderRadius=\"textBlock\" backgroundColor=\"bgAccent\" padding={6}>\n      {status === STATUS.pending && <Loader />}\n\n      {reviews.length === 0 ? (\n        <p>There is no reviews.</p>\n      ) : (\n        <Box as=\"ul\" display=\"flex\" flexDirection=\"column\" gridGap={6}>\n          {reviews.map(({ id, author, created_at, content }) => (\n            <Box\n              as=\"li\"\n              display=\"flex\"\n              flexDirection=\"column\"\n              gridGap={3}\n              key={id}\n            >\n              <h3>{author}</h3>\n              <h4>{created_at.slice(0, 10)}</h4>\n              <Content>{content}</Content>\n            </Box>\n          ))}\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default Reviews;","\n\nconst defaultImage = '<https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700>'\n\n//   < img src = {\n//     movieData.poster_path ?\n//       [<https://image.tmdb.org/t/p/w500/${movieData.poster_path}>](<https://image.tmdb.org/t/p/w500/$%7BmovieData.poster_path%7D>)\n//  : defaultImage\n// }\n// width={250}\n// alt=\"poster\"\n// />\n\n\nexport function getImagePosterPath(path) {\n  return path ? `https://image.tmdb.org/t/p/w500/${path}` : defaultImage;\n}","import axios from 'axios';\nimport { API_KEY, BASE_URL } from 'constants';\nimport { getImagePosterPath } from 'utils/defaultImage';\n\n\n\nexport async function getTrendingMovies(page, controller) {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}&page=${page}`,\n    { signal: controller.signal }\n  );\n\n  const movies = response.data.results.map(({ id, title, poster_path }) => {\n    return {\n      id,\n      title,\n      posterPath: getImagePosterPath(poster_path),\n    };\n  });\n\n  return { movies, totalPages: response.data.total_pages };\n}\n\nexport async function getMovieDetails(movieId, controller) {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`,\n    { signal: controller.signal }\n  );\n\n  const { title, poster_path, overview, genres, vote_average, release_date } =\n    response.data;\n\n  return {\n    title,\n    posterPath: getImagePosterPath(poster_path),\n    overview,\n    genres: genres.map(genre => genre.name).join(', '),\n    vote: vote_average.toFixed(1),\n    year: release_date.slice(0, 4),\n  };\n}\n\nexport async function getMovieCast(movieId, controller) {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`,\n    { signal: controller.signal }\n  );\n\n  const actors = response.data.cast.map(\n    ({ id, name, profile_path, character }) => {\n      return {\n        id,\n        name,\n        profilePath: getImagePosterPath(profile_path),\n        character,\n      };\n    }\n  );\n\n  return actors;\n}\n\nexport async function getReviews(movieId, controller) {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`,\n    { signal: controller.signal }\n  );\n\n  const reviews = response.data.results.map(({ id, author, content }) => {\n    return {\n      id,\n      author,\n      content,\n    };\n  });\n\n  return reviews;\n}\n\nexport async function getMovies(query, page = 1, controller) {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=${page}`,\n    { signal: controller.signal }\n  );\n\n  const movies = response.data.results.map(({ id, title, poster_path }) => {\n    return {\n      id,\n      title,\n      posterPath: getImagePosterPath(poster_path),\n    };\n  });\n\n  return {\n    movies,\n    totalPages: response.data.total_pages,\n    totalResults: response.data.total_results,\n  };\n}"],"names":["Content","styled","STATUS","movieId","useParams","useState","reviews","setReviews","status","setStatus","useEffect","controller","AbortController","signal","getReviews","id","reviewInfo","toast","message","getMovieCast","abort","Box","borderRadius","backgroundColor","padding","Loader","length","as","display","flexDirection","gridGap","map","author","created_at","content","slice","getImagePosterPath","path","getTrendingMovies","page","axios","BASE_URL","API_KEY","response","movies","data","results","title","posterPath","poster_path","totalPages","total_pages","getMovieDetails","overview","genres","vote_average","release_date","genre","name","join","vote","toFixed","year","actors","cast","profile_path","character","profilePath","getMovies","query","totalResults","total_results"],"sourceRoot":""}