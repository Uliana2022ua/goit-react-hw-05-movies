{"version":3,"file":"static/js/607.3c3ca95d.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","utils/movieAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Content = styled.p`\n  text-align: justify;\n`;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Box } from 'components/Box';\nimport { getReviews } from 'utils';\nimport Loader from 'components/Loader';\nimport { Content } from './Reviews.styled';\n\nconst STATUS = {\n  idle: 0,\n  pending: 1,\n  resolved: 2,\n  rejected: 3,\n};\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n  const [status, setStatus] = useState(STATUS.idle);\n\n  // -------------------------------------------------\n  useEffect(() => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    async function getMovieCast() {\n      try {\n        setStatus(STATUS.pending);\n        const reviewInfo = await getReviews({ id: movieId, signal });\n        setReviews(reviewInfo);\n        setStatus(STATUS.resolved);\n      } catch (error) {\n        setStatus(STATUS.rejected);\n        toast(error.message);\n      }\n    }\n    getMovieCast();\n\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  // -------------------------------------------------\n  if (!reviews) {\n    return;\n  }\n\n  // -------------------------------------------------\n  return (\n    <Box borderRadius=\"textBlock\" backgroundColor=\"bgAccent\" padding={6}>\n      {status === STATUS.pending && <Loader />}\n\n      {reviews.length === 0 ? (\n        <p>There is no reviews.</p>\n      ) : (\n        <Box as=\"ul\" display=\"flex\" flexDirection=\"column\" gridGap={6}>\n          {reviews.map(({ id, author, created_at, content }) => (\n            <Box\n              as=\"li\"\n              display=\"flex\"\n              flexDirection=\"column\"\n              gridGap={3}\n              key={id}\n            >\n              <h3>{author}</h3>\n              <h4>{created_at.slice(0, 10)}</h4>\n              <Content>{content}</Content>\n            </Box>\n          ))}\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default Reviews;","import axios from 'axios';\nimport { API_KEY, BASE_URL } from 'constants';\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.headers.common['Authorization'] = `Bearer ${API_KEY}`;\n\n// -------------------------------------------------\nexport async function getMovieCast({ id, signal }) {\n  try {\n    const response = await axios.get(`movie/${id}/credits`, {\n      signal,\n    });\n    if (!response) {\n      throw Error('We are sorry! There is no cast information about the movie');\n    }\n\n    return response.data.cast;\n  } catch (error) {\n    if (error.name === 'CanceledError') {\n      return null;\n    }\n    if (error.response || error.request) {\n      throw Error('There is no server response. Try later again!');\n    } else {\n      throw error;\n    }\n  }\n}\n\n// -------------------------------------------------\nexport async function getMovieDetails({ id, signal }) {\n  try {\n    const response = await axios.get(`movie/${id}`, { signal });\n    if (!response) {\n      throw Error(\n        'We are sorry! There is no detailed information about the movie'\n      );\n    }\n\n    return response.data;\n  } catch (error) {\n    if (error.name === 'CanceledError') {\n      return null;\n    }\n    if (error.response || error.request) {\n      throw Error('There is no server response. Try later again!');\n    } else {\n      throw error;\n    }\n  }\n}\n\n// -------------------------------------------------\nexport async function getMovies({ page = 1, search = '', signal }) {\n  let params = {\n    page: page,\n    query: search,\n  };\n\n  try {\n    const response = await axios.get('search/movie', { params, signal });\n    if (response.data.results.length === 0) {\n      throw Error('There is no any match on your request!');\n    }\n\n    return response.data.results;\n  } catch (error) {\n    if (error.name === 'CanceledError') {\n      return [];\n    }\n    if (error.response || error.request) {\n      throw Error('There is no server response. Try later again!');\n    } else {\n      throw error;\n    }\n  }\n}\n\n// -------------------------------------------------\nexport async function getReviews({ id, signal }) {\n  try {\n    const response = await axios.get(`movie/${id}/reviews`, { signal });\n    if (!response) {\n      throw Error('There is no cast information about the movie');\n    }\n\n    return response.data.results;\n  } catch (error) {\n    if (error.name === 'CanceledError') {\n      return null;\n    }\n    if (error.response || error.request) {\n      throw Error('There is no server response. Try later again!');\n    } else {\n      throw error;\n    }\n  }\n}\n\n// -------------------------------------------------\nexport async function getTrendingMovies({ signal, page = 1 }) {\n  let params = {\n    page: page,\n  };\n\n  try {\n    const response = await axios.get('trending/movie/day', { params, signal });\n    if (response.data.results.length === 0) {\n      throw Error('There is no any match on your request!');\n    }\n\n    return response.data.results;\n  } catch (error) {\n    if (error.name === 'CanceledError') {\n      return [];\n    }\n    if (error.response || error.request) {\n      throw Error('There is no server response. Try later again!');\n    } else {\n      throw error;\n    }\n  }\n}"],"names":["Content","styled","STATUS","movieId","useParams","useState","reviews","setReviews","status","setStatus","useEffect","controller","AbortController","signal","getReviews","id","reviewInfo","toast","message","getMovieCast","abort","Box","borderRadius","backgroundColor","padding","Loader","length","as","display","flexDirection","gridGap","map","author","created_at","content","slice","axios","response","Error","data","cast","name","request","getMovieDetails","getMovies","page","search","params","query","results","getTrendingMovies","BASE_URL","API_KEY"],"sourceRoot":""}