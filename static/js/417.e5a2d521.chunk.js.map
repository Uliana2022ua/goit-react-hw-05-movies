{"version":3,"file":"static/js/417.e5a2d521.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","utils/defaultImage.js","utils/movieAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Image = styled.img`\n  object-fit: cover;\n`;\n\nexport const ImageWrap = styled.div`\n  width: 300px;\n  height: 450px;\n  background-color: ${p => p.theme.colors.bgMain};\n  border-radius: ${p => p.theme.radii.textBlock};\n  margin-bottom: ${p => p.theme.space[3]}px;\n  overflow: hidden;\n`;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport { Box } from 'components/Box';\nimport Loader from 'components/Loader';\nimport { getMovieCast } from 'utils';\nimport { Image, ImageWrap } from './Cast.styled';\n\nconst STATUS = {\n  idle: 0,\n  pending: 1,\n  resolved: 2,\n  rejected: 3,\n};\n\nconst Cast = () => {\n  const BASE_URL = 'https://image.tmdb.org/t/p/w300';\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n  const [status, setStatus] = useState(STATUS.idle);\n\n  // -------------------------------------------------\n  useEffect(() => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    async function getCast() {\n      try {\n        setStatus(STATUS.pending);\n        const castInfo = await getMovieCast({ id: movieId, signal });\n        setCast(castInfo);\n        setStatus(STATUS.resolved);\n      } catch (error) {\n        setStatus(STATUS.rejected);\n        toast(error.message);\n      }\n    }\n    getCast();\n\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  // -------------------------------------------------\n  if (!cast) {\n    return;\n  }\n\n  // -------------------------------------------------\n  return (\n    <Box borderRadius=\"textBlock\" backgroundColor=\"bgAccent\" padding={6}>\n      {status === STATUS.pending && <Loader />}\n      {cast.length === 0 ? (\n        <p>There is no cast.</p>\n      ) : (\n        <Box\n          display=\"grid\"\n          gridTemplateColumns=\"1fr 1fr 1fr\"\n          gridGap={5}\n          maxWidth=\"maxBox\"\n          as=\"ul\"\n        >\n          {cast.map(({ id, profile_path, name, character }) => (\n            <li key={id}>\n              <ImageWrap>\n                <Image src={BASE_URL + profile_path} alt={name} />\n              </ImageWrap>\n              <h3>{name}</h3>\n              <p>\n                Character: <span>{character}</span>\n              </p>\n            </li>\n          ))}\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default Cast;","\n\nconst defaultImage = '<https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700>'\n\n//   < img src = {\n//     movieData.poster_path ?\n//       [<https://image.tmdb.org/t/p/w500/${movieData.poster_path}>](<https://image.tmdb.org/t/p/w500/$%7BmovieData.poster_path%7D>)\n//  : defaultImage\n// }\n// width={250}\n// alt=\"poster\"\n// />\n\n\nexport function getImagePosterPath(path) {\n  return path ? `https://image.tmdb.org/t/p/w500/${path}` : defaultImage;\n}","import axios from 'axios';\nimport { API_KEY, BASE_URL } from 'constants';\nimport { getImagePosterPath } from 'utils/defaultImage';\n\n\n\nexport async function getTrendingMovies(page, controller) {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}&page=${page}`,\n    { signal: controller.signal }\n  );\n\n  const movies = response.data.results.map(({ id, title, poster_path }) => {\n    return {\n      id,\n      title,\n      posterPath: getImagePosterPath(poster_path),\n    };\n  });\n\n  return { movies, totalPages: response.data.total_pages };\n}\n\nexport async function getMovieDetails(movieId, controller) {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`,\n    { signal: controller.signal }\n  );\n\n  const { title, poster_path, overview, genres, vote_average, release_date } =\n    response.data;\n\n  return {\n    title,\n    posterPath: getImagePosterPath(poster_path),\n    overview,\n    genres: genres.map(genre => genre.name).join(', '),\n    vote: vote_average.toFixed(1),\n    year: release_date.slice(0, 4),\n  };\n}\n\nexport async function getMovieCast(movieId, controller) {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`,\n    { signal: controller.signal }\n  );\n\n  const actors = response.data.cast.map(\n    ({ id, name, profile_path, character }) => {\n      return {\n        id,\n        name,\n        profilePath: getImagePosterPath(profile_path),\n        character,\n      };\n    }\n  );\n\n  return actors;\n}\n\nexport async function getReviews(movieId, controller) {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`,\n    { signal: controller.signal }\n  );\n\n  const reviews = response.data.results.map(({ id, author, content }) => {\n    return {\n      id,\n      author,\n      content,\n    };\n  });\n\n  return reviews;\n}\n\nexport async function getMovies(query, page = 1, controller) {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=${page}`,\n    { signal: controller.signal }\n  );\n\n  const movies = response.data.results.map(({ id, title, poster_path }) => {\n    return {\n      id,\n      title,\n      posterPath: getImagePosterPath(poster_path),\n    };\n  });\n\n  return {\n    movies,\n    totalPages: response.data.total_pages,\n    totalResults: response.data.total_results,\n  };\n}"],"names":["Image","styled","ImageWrap","p","theme","colors","bgMain","radii","textBlock","space","STATUS","movieId","useParams","useState","cast","setCast","status","setStatus","useEffect","controller","AbortController","signal","getMovieCast","id","castInfo","toast","message","getCast","abort","Box","borderRadius","backgroundColor","padding","Loader","length","display","gridTemplateColumns","gridGap","maxWidth","as","map","profile_path","name","character","src","alt","getImagePosterPath","path","getTrendingMovies","page","axios","BASE_URL","API_KEY","response","movies","data","results","title","posterPath","poster_path","totalPages","total_pages","getMovieDetails","overview","genres","vote_average","release_date","genre","join","vote","toFixed","year","slice","actors","profilePath","getReviews","reviews","author","content","getMovies","query","totalResults","total_results"],"sourceRoot":""}